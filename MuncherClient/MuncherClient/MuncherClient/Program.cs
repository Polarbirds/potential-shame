using System;
using Microsoft.AspNet.SignalR;
using Microsoft.Owin.Hosting;
using Owin;
using Microsoft.Owin.Cors;
using System.Collections.Generic;

namespace MuncherBackend
{
    class Program
    {
        static void Main(string[] args)
        {
            // This will *ONLY* bind to localhost, if you want to bind to all addresses
            // use http://*:8080 to bind to all addresses. 
            // See http://msdn.microsoft.com/en-us/library/system.net.httplistener.aspx 
            // for more information.
            string url = "http://localhost:8080";
            using (WebApp.Start(url))
            {
                Console.WriteLine("Server running on {0}", url);
                
            }
        }
    }
    public class GameHub : Hub
    {
        private Dictionary<string, Game> connections = new Dictionary<string, Game>();

        /**
         * TODO When game-saving has been implemented remove parameter 'int id'.
         *  This int should be generated by finding the last played game and
         *  setting this id to the last one +1. (or similar)
         *  Jist: Auto-generate gameId
         */
        public bool NewGame(string gameId, int cap)
        {
            // If game already exists, return false
            if (GetGameById(gameId) != null)
            {
                return false;
            }
            // Game does not exist, create it
             connections.Add(Context.ConnectionId, new Game(gameId, cap));
             return true;
        }

        public bool EndGame(string gameId, bool save)
        {
            // If game does not exist
            Game game = GetGameById(gameId);
            if (game == null)
            {
                return false;
            }
            // Game exists
            List<string> itemsToRemove = new List<string>();
            foreach (KeyValuePair<string, Game> pair in connections)
            {
                if (pair.Value == game) itemsToRemove.Add(pair.Key);
            }

            foreach (string s in itemsToRemove)
            {
                connections.Remove(s);
            }
            
            return true;
        }

        public void UpdateLvl(int amount)
        {
            string conId = Context.ConnectionId;
            connections[conId].UpdateLvl(conId, amount);
        }

        public void UpdateBonus(int amount)
        {
            string conId = Context.ConnectionId;
            connections[conId].UpdateBonus(conId, amount);
        }

        public void UpdateOneShot(int amount)
        {
            string conId = Context.ConnectionId;
            connections[conId].UpdateOneShot(conId, amount);
        }

        private Game GetGameById(string id)
        {
            foreach(KeyValuePair<string, Game> val in connections) {
                if (val.Value.gameId == id) return val.Value;
            }
            return null;
        }

        public bool AddPlayer(string gameId)
        {
            Game byId = GetGameById(gameId);
            if (byId != null)
            {
                string conId = Context.ConnectionId;
                byId.addPlayer(conId);
                Groups.Add(conId, "Player");
                return true;
            }
            return false;
        }

        public void AddManager(string gameId)
        {
            string conId = Context.ConnectionId;
            connections.Add(conId, GetGameById(gameId));
            Groups.Add(conId, "Manager");
        }

        private void Update(string name)
        {
            String id = Context.ConnectionId;

            Clients.Group("Manager").update();

            Player p = connections[id].players[id];
            Clients.Caller.update(p.lvl, p.bonus, p.oneShot);

            Console.WriteLine("update");
            Console.ReadLine();
        }

        private class Game
        {
            public readonly string gameId;
            public readonly int winningLevel;

            public Dictionary<string, Player> players;

            internal Game(string gameId, int cap)
            {
                this.gameId = gameId;
                winningLevel = cap;
                players = new Dictionary<string, Player>();
            }

            internal void UpdateLvl(string key, int amount)
            {
                if (players.ContainsKey(key))
                {
                    Player p = players[key];
                    p.lvl += amount;
                    if (p.lvl < 1) p.lvl = 1;
                }
            }

            internal void UpdateBonus(string key, int amount)
            {
                if (players.ContainsKey(key))
                {
                    Player p = players[key];
                    p.bonus += amount;
                    if (p.bonus < 0) p.bonus = 0;
                }
            }

            internal void UpdateOneShot(string key, int amount)
            {
                if (players.ContainsKey(key))
                {
                    players[key].oneShot += amount;
                }
            }

            public void addPlayer(string key)
            {
                players.Add(key, new Player());
            }
        }

        private class Player
        {
            internal int lvl = 1;
            internal int bonus = 0;
            internal int oneShot = 0;
        }
    }
}